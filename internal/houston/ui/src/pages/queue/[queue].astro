---
import Layout from "@/layouts/Layout.astro"
import Navigation from '@/components/navigation.jsx';
import QueueDetailsNav from "@/components/queueDetailsNav";

// This tells Astro this is a server-side rendered route
export const prerender = false;

// Add this function to satisfy Astro's requirements for dynamic routes
export function getStaticPaths() {
  return [];
}

const { queue } = Astro.params;

// Fetch queue details from the API
let queueDetails = null;
let error = null;

try {
  const response = await fetch(`http://localhost:8081/api/v1/queue/${queue}`);
  if (!response.ok) {
    // Try to parse error from backend if available
    let errorMsg = `Failed to fetch queue details for ${queue}`;
    try {
        const errorData = await response.json();
        if (errorData && errorData.message) {
            errorMsg = errorData.message;
        }
    } catch (e) {
        // Ignore if response is not JSON or if response.ok was false due to network, not backend error
        if (response.statusText) {
            errorMsg = response.statusText;
        }
    }
    throw new Error(errorMsg);
  }
  queueDetails = await response.json();
} catch (err) {
  console.error("Error fetching queue:", err);
  if (err instanceof TypeError) {
    error = { type: "API_UNREACHABLE", message: "Failed to connect to the backend API. Please check your connection and try refreshing the page." };
  } else {
    error = { type: "GENERAL", message: err.message || "An unexpected error occurred." };
  }
}

const pageTitle = queueDetails?.queueName || (error ? 'Error' : 'Queue Details');
const breadcrumbText = queueDetails?.queueName || (error ? 'Error Fetching Details' : 'Queue Details');
---

<Layout title={`${pageTitle} | Houston`} description="Queue Details" ogimage="https://houston.seline.so/og.png">
  <div class="container mx-auto pt-3">
    <Navigation 
      client:load 
      activeTab="queues" 
      hideContent={true} 
    />
    <div class="mt-4">
      <QueueDetailsNav client:load queueDetails={queueDetails} error={error} breadcrumbText={breadcrumbText} />
    </div>
  </div>
</Layout>
