// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/schema.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlainQService_ListQueues_FullMethodName    = "/v1.PlainQService/ListQueues"
	PlainQService_DescribeQueue_FullMethodName = "/v1.PlainQService/DescribeQueue"
	PlainQService_CreateQueue_FullMethodName   = "/v1.PlainQService/CreateQueue"
	PlainQService_PurgeQueue_FullMethodName    = "/v1.PlainQService/PurgeQueue"
	PlainQService_DeleteQueue_FullMethodName   = "/v1.PlainQService/DeleteQueue"
	PlainQService_Send_FullMethodName          = "/v1.PlainQService/Send"
	PlainQService_Receive_FullMethodName       = "/v1.PlainQService/Receive"
	PlainQService_Delete_FullMethodName        = "/v1.PlainQService/Delete"
)

// PlainQServiceClient is the client API for PlainQService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PlainQ service represents logic of work with PlainQ server.
type PlainQServiceClient interface {
	// List all queues on the server.
	ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	// DescribeQueue returns information about specified queue.
	DescribeQueue(ctx context.Context, in *DescribeQueueRequest, opts ...grpc.CallOption) (*DescribeQueueResponse, error)
	// CreateQueue creates new queue.
	CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error)
	// PurgeQueue deletes all messages from the queue.
	PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error)
	// DeleteQueue deletes queue.
	DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error)
	// Send sends message to the queue.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Receive receives message from the queue.
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error)
	// Delete deletes message from the queue.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type plainQServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlainQServiceClient(cc grpc.ClientConnInterface) PlainQServiceClient {
	return &plainQServiceClient{cc}
}

func (c *plainQServiceClient) ListQueues(ctx context.Context, in *ListQueuesRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, PlainQService_ListQueues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) DescribeQueue(ctx context.Context, in *DescribeQueueRequest, opts ...grpc.CallOption) (*DescribeQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DescribeQueueResponse)
	err := c.cc.Invoke(ctx, PlainQService_DescribeQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) CreateQueue(ctx context.Context, in *CreateQueueRequest, opts ...grpc.CallOption) (*CreateQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateQueueResponse)
	err := c.cc.Invoke(ctx, PlainQService_CreateQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) PurgeQueue(ctx context.Context, in *PurgeQueueRequest, opts ...grpc.CallOption) (*PurgeQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurgeQueueResponse)
	err := c.cc.Invoke(ctx, PlainQService_PurgeQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) DeleteQueue(ctx context.Context, in *DeleteQueueRequest, opts ...grpc.CallOption) (*DeleteQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQueueResponse)
	err := c.cc.Invoke(ctx, PlainQService_DeleteQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, PlainQService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveResponse)
	err := c.cc.Invoke(ctx, PlainQService_Receive_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plainQServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, PlainQService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlainQServiceServer is the server API for PlainQService service.
// All implementations must embed UnimplementedPlainQServiceServer
// for forward compatibility.
//
// PlainQ service represents logic of work with PlainQ server.
type PlainQServiceServer interface {
	// List all queues on the server.
	ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error)
	// DescribeQueue returns information about specified queue.
	DescribeQueue(context.Context, *DescribeQueueRequest) (*DescribeQueueResponse, error)
	// CreateQueue creates new queue.
	CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error)
	// PurgeQueue deletes all messages from the queue.
	PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error)
	// DeleteQueue deletes queue.
	DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error)
	// Send sends message to the queue.
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// Receive receives message from the queue.
	Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error)
	// Delete deletes message from the queue.
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedPlainQServiceServer()
}

// UnimplementedPlainQServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlainQServiceServer struct{}

func (UnimplementedPlainQServiceServer) ListQueues(context.Context, *ListQueuesRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (UnimplementedPlainQServiceServer) DescribeQueue(context.Context, *DescribeQueueRequest) (*DescribeQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeQueue not implemented")
}
func (UnimplementedPlainQServiceServer) CreateQueue(context.Context, *CreateQueueRequest) (*CreateQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (UnimplementedPlainQServiceServer) PurgeQueue(context.Context, *PurgeQueueRequest) (*PurgeQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurgeQueue not implemented")
}
func (UnimplementedPlainQServiceServer) DeleteQueue(context.Context, *DeleteQueueRequest) (*DeleteQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}
func (UnimplementedPlainQServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedPlainQServiceServer) Receive(context.Context, *ReceiveRequest) (*ReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedPlainQServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPlainQServiceServer) mustEmbedUnimplementedPlainQServiceServer() {}
func (UnimplementedPlainQServiceServer) testEmbeddedByValue()                       {}

// UnsafePlainQServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlainQServiceServer will
// result in compilation errors.
type UnsafePlainQServiceServer interface {
	mustEmbedUnimplementedPlainQServiceServer()
}

func RegisterPlainQServiceServer(s grpc.ServiceRegistrar, srv PlainQServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlainQServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlainQService_ServiceDesc, srv)
}

func _PlainQService_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQueuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_ListQueues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).ListQueues(ctx, req.(*ListQueuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_DescribeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).DescribeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_DescribeQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).DescribeQueue(ctx, req.(*DescribeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_CreateQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).CreateQueue(ctx, req.(*CreateQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_PurgeQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).PurgeQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_PurgeQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).PurgeQueue(ctx, req.(*PurgeQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_DeleteQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).DeleteQueue(ctx, req.(*DeleteQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlainQService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlainQServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlainQService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlainQServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlainQService_ServiceDesc is the grpc.ServiceDesc for PlainQService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlainQService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.PlainQService",
	HandlerType: (*PlainQServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQueues",
			Handler:    _PlainQService_ListQueues_Handler,
		},
		{
			MethodName: "DescribeQueue",
			Handler:    _PlainQService_DescribeQueue_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _PlainQService_CreateQueue_Handler,
		},
		{
			MethodName: "PurgeQueue",
			Handler:    _PlainQService_PurgeQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _PlainQService_DeleteQueue_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _PlainQService_Send_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _PlainQService_Receive_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PlainQService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/schema.proto",
}
